name: Release and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions: write-all

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: test
    outputs:
      new_release_published: ${{ steps.release.outputs.new_release_published }}
      new_release_version: ${{ steps.release.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build:packages

      - name: Extract version from tag
        id: release
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "new_release_published=true" >> $GITHUB_OUTPUT
          echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Setup npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc

      - name: Publish packages to npm
        run: |
          echo "Publishing new release version: ${{ steps.release.outputs.new_release_version }}"
          pnpm --filter @xsin/vue-waterfall publish --no-git-checks --access public
          pnpm --filter @xsin/vue-waterfall-core publish --no-git-checks --access public
          pnpm --filter @xsin/vite-plugin-lib publish --no-git-checks --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  pkg-pr-new:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build:packages

      - name: Publish to pkg.pr.new
        run: |
          if [ "${{ github.event.head_commit.message }}" =~ "waterfall" ]; then
            pnpm --filter @xsin/vue-waterfall dlx pkg-pr-new publish
          elif [ "${{ github.event.head_commit.message }}" =~ "waterfall-core" ]; then
            pnpm --filter @xsin/vue-waterfall-core dlx pkg-pr-new publish
          elif [ "${{ github.event.head_commit.message }}" =~ "vite-plugin-lib" ]; then
            pnpm --filter @xsin/vite-plugin-lib dlx pkg-pr-new publish
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
